service cloud.firestore {
  match /databases/{database}/documents {
    
    // Rule for users collection
    match /users/{userId} {
      // Allow read/write access only for the authenticated user
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /workouts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      match /workoutData/{workoutId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /finishedWorkouts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      match /finishedWorkoutsData/{workoutId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /allWorkouts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      match /allWorkoutsData/{workoutId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
     
      // Rule for meals-related collections
    match /meals/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /mealData/{documentId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

  }
}




Sprinter
Middle Distance
Long Distance
High jump
Long jump


import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class NewMealPageTest extends StatefulWidget {
  const NewMealPageTest({super.key});

  @override
  State<NewMealPageTest> createState() => _NewMealPageTestState();
}

class _NewMealPageTestState extends State<NewMealPageTest> {
  TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> _searchResults = [];
  List<Map<String, dynamic>> _addedItems = [];
  bool _isSearching = false;
  Map<String, int> _quantities = {};
  Map<String, bool> _expandedItems = {};

  // Function to search food items in Firestore
  Future<void> _searchFood(String query) async {
    if (query.isEmpty) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      return;
    }

    try {
      QuerySnapshot snapshot = await FirebaseFirestore.instance
          .collection('food')
          .where("name", isGreaterThanOrEqualTo: query)
          .where("name", isLessThan: query + '\uf8ff')
          .get();

      List<Map<String, dynamic>> results = snapshot.docs
          .map((doc) => doc.data() as Map<String, dynamic>)
          .toList();

      setState(() {
        _searchResults = results;
        _isSearching = true;
      });

      // Initialize quantity and expansion states
      for (var food in results) {
        _quantities[food['name']] = 1; // Default quantity 1
        _expandedItems[food['name']] = false; // Initially collapsed
      }
    } catch (e) {
      print("[ERROR] Failed to search food: $e");
    }
  }

  // Function to toggle expansion of food item
  void _toggleExpand(String foodName) {
    setState(() {
      _expandedItems[foodName] = !_expandedItems[foodName]!;
    });
  }

  // Function to increment quantity
  void _incrementQuantity(String foodName) {
    setState(() {
      _quantities[foodName] = (_quantities[foodName]! + 1);
    });
  }

  // Function to decrement quantity (min 1)
  void _decrementQuantity(String foodName) {
    setState(() {
      if (_quantities[foodName]! > 1) {
        _quantities[foodName] = (_quantities[foodName]! - 1);
      }
    });
  }

  // Function to add food to meal list
  void _addFood(Map<String, dynamic> foodItem) {
    String foodName = foodItem['name'];
    int quantity = _quantities[foodName] ?? 1;

    Map<String, dynamic> addedFood = {
      "name": foodItem['name'],
      "calories": foodItem['calories'] * quantity,
      "protein": foodItem['protein'] * quantity,
      "carbs": foodItem['carbs'] * quantity,
      "fat": foodItem['fat'] * quantity,
     
      "quantity": quantity
    };

    setState(() {
      _addedItems.add(addedFood);
    });

    print("[DEBUG] Added ${foodItem['name']} with quantity $quantity.");

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("${foodItem['name']} added with quantity $quantity!")),
    );
  }

  // Function to finalize meal
  void _finalizeMeal() {
    if (_addedItems.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("No items added!")),
      );
      return;
    }

    print("[DEBUG] Finalizing meal:");
    for (var item in _addedItems) {
      print("  - ${item['name']} (Qty: ${item['quantity']}, Calories: ${item['calories']})");
    }

    // Clear added items
    setState(() {
      _addedItems.clear();
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Meal added successfully!")),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Search Food")),
      body: Padding(
        padding: const EdgeInsets.all(10.0),
        child: Column(
          children: [
            // Search Bar
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                hintText: "Search for food...",
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
              ),
              onChanged: (query) {
                _searchFood(query);
              },
            ),
            SizedBox(height: 10),

            // Show search results only if _isSearching is true
            if (_isSearching)
              Expanded(
                child: ListView.builder(
                  itemCount: _searchResults.length,
                  itemBuilder: (context, index) {
                    var foodItem = _searchResults[index];
                    String foodName = foodItem['name'];
                    bool isExpanded = _expandedItems[foodName] ?? false;
                    int quantity = _quantities[foodName] ?? 1;

                    return Card(
                      child: Column(
                        children: [
                          // Main ListTile (Clickable)
                          ListTile(
                            title: Text(foodItem['name'] ?? "Unknown"),
                            subtitle: Text(
                              "Calories: ${foodItem['calories']} | Protein: ${foodItem['protein']}g",
                            ),
                            trailing: Icon(
                              isExpanded ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
                            ),
                            onTap: () => _toggleExpand(foodName),
                          ),

                          // Expanded View (Shows more details when clicked)
                          if (isExpanded)
                            Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text("Carbs: ${foodItem['carbs']}g"),
                                  Text("Fat: ${foodItem['fat']}g"),
                                  
                                  SizedBox(height: 8),

                                  // Quantity Selector
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                    children: [
                                      Text("Quantity: $quantity"),
                                      Row(
                                        children: [
                                          IconButton(
                                            icon: Icon(Icons.remove, color: Colors.red),
                                            onPressed: () => _decrementQuantity(foodName),
                                          ),
                                          IconButton(
                                            icon: Icon(Icons.add, color: Colors.green),
                                            onPressed: () => _incrementQuantity(foodName),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),

                                  // Add Button
                                  ElevatedButton(
                                    onPressed: () => _addFood(foodItem),
                                    child: Text("Add"),
                                  ),
                                ],
                              ),
                            ),
                        ],
                      ),
                    );
                  },
                ),
              ),

            // List of added items
            if (_addedItems.isNotEmpty) ...[
              SizedBox(height: 10),
              Text("Added Items", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
              Expanded(
                child: ListView.builder(
                  itemCount: _addedItems.length,
                  itemBuilder: (context, index) {
                    var item = _addedItems[index];
                    return ListTile(
                      title: Text(item['name']),
                      subtitle: Text(
                        "Qty: ${item['quantity']}, Calories: ${item['calories']}, Protein: ${item['protein']}g",
                      ),
                    );
                  },
                ),
              ),
            ],

            // "Add Meal" Button
            if (_addedItems.isNotEmpty)
              ElevatedButton(
                onPressed: _finalizeMeal,
                child: Text("Add Meal"),
              ),
          ],
        ),
      ),
    );
  }
}
